use gba::video::{Color, TextEntry, Tile4};

pub enum BackgroundSize {
    Bg32x32,
    Bg64x32,
    Bg32x64,
    Bg64x64,
}

pub struct Background {
    tileset: &'static [Tile4],
    tilemap: &'static [TextEntry],
    palette: &'static [Color],
    size: BackgroundSize, //
}

impl From<&BackgroundSize> for u16 {
    fn from(size: &BackgroundSize) -> Self {
        match size {
            BackgroundSize::Bg32x32 => 0b00,
            BackgroundSize::Bg64x32 => 0b01,
            BackgroundSize::Bg32x64 => 0b10,
            BackgroundSize::Bg64x64 => 0b11,
        }
    }
}

impl From<BackgroundSize> for u16 {
    fn from(size: BackgroundSize) -> Self {
        (&size).into()
    }
}
// TODO - Background loading.
// pub struct LoadedSprite<'a> {
//     sprite: &'a Sprite,
//     memory: ClaimedVolRegion<'a, Tile4, Safe, Safe, 1024>,
// }

// Insert all of the code generated by the build sript.
// This will contain static definitions for all of our aseprite files.
include!(concat!(env!("OUT_DIR"), "/background_data.rs"));
